package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.PositionJpaRepository;
import ca.jrvs.apps.trading.model.Account;
import ca.jrvs.apps.trading.model.Position;
import ca.jrvs.apps.trading.model.Trader;
import ca.jrvs.apps.trading.model.TraderAccountView;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import ca.jrvs.apps.trading.dao.TraderJpaRepository;
import ca.jrvs.apps.trading.dao.AccountJpaRepository;
import ca.jrvs.apps.trading.dao.SecurityOrderJpaRepository;

import java.util.List;

@Service
public class TraderAccountService {
    private final Logger logger = LoggerFactory.getLogger(TraderAccountService.class);
    private final TraderJpaRepository traderJpaRepository;

    private final AccountJpaRepository accountJpaRepository;
    private final SecurityOrderJpaRepository securityOrderJpaRepository;

    private final PositionJpaRepository positionJpaRepository;

    @Autowired
    public TraderAccountService(TraderJpaRepository traderJpaRepository,
                                AccountJpaRepository accountJpaRepository,
                                SecurityOrderJpaRepository securityOrderJpaRepository,
                                PositionJpaRepository positionJpaRepository) {
        this.traderJpaRepository = traderJpaRepository;
        this.accountJpaRepository = accountJpaRepository;
        this.securityOrderJpaRepository = securityOrderJpaRepository;
        this.positionJpaRepository = positionJpaRepository;
    }
    /**
     * Create a new trader and initialize a new account with 0 amount
     * - validate user input (all fields must be non empty)
     * - create a trader
     * - create an account
     * - create, setup, and return a new traderAccountView
     *
     * Assumption: to simplify the logic, each trader has only one account where traderId == accountId
     *
     * @param trader cannot be null. All fields cannot be null except for id (auto-generated by db)
     * @return traderAccountView
     * @throws IllegalArgumentException if a trader has null fields or id is not null
     */
    public TraderAccountView createTraderAndAccount(Trader trader) {
        try {
            // Save trader
            trader = traderJpaRepository.save(trader);

            // Create and save account
            Account account = new Account();
            account.setTrader(trader);
            accountJpaRepository.save(account);

            return new TraderAccountView(trader, account);
        } catch (Exception e) {
            // Log the error
            logger.error("Error creating Trader and Account: " + e);
        }

        // If an exception occurs, throw an IllegalArgumentException
        throw new IllegalArgumentException("Trader was null or contained null fields");
    }

    /**
     * A trader can be deleted if and only if it has no open position and 0 cash balance
     * - validate traderId
     * - get trader account by traderId and check account balance
     * - get positions by accountId and check positions
     * - delete all securityOrders, account, trader (in this order)
     *
     * @param traderId must not be null
     * @throws IllegalArgumentException if traderId is null or not found or unable to delete
     */
    public void deleteTraderById(Integer traderId) {
        // Validate traderId
        if (traderId == null) {
            throw new IllegalArgumentException("TraderId must not be null");
        }

        // Get trader by Id
        Trader trader = traderJpaRepository.findById(traderId)
                .orElseThrow(() -> new IllegalArgumentException("Trader not found with ID: " + traderId));

        // Check if the trader has any open positions
        List<Position> positions = positionJpaRepository.getPositionsByAccountId(traderId);
        if (!positions.isEmpty()) {
            throw new IllegalArgumentException("Cannot delete trader with open positions");
        }

        // Get trader's account and check balance
        Account account = accountJpaRepository.findByTraderId(traderId)
                .orElseThrow(() -> new IllegalArgumentException("Trader account not found for ID: " + traderId));

        if (account.getAmount() != 0.0) {
            throw new IllegalArgumentException("Cannot delete trader with non-zero cash balance");
        }

        // Delete all security orders for the trader
        securityOrderJpaRepository.deleteAllByAccountId(traderId);

        // Delete the account
        accountJpaRepository.deleteById(account.getId());

        // Delete the trader
        traderJpaRepository.deleteById(traderId);

        logger.info("Successfully deleted trader with ID: " + traderId);
    }

    /**
     * Deposit a fund to an account by traderId
     * - validate user input
     * - find account by trader id
     * - update the amount accordingly
     *
     * @param traderId must not be null
     * @param fund must be greater than 0
     * @return updated Account
     * @throws IllegalArgumentException if traderId is null or not found,
     * 									and fund is less than or equal to 0
     */
    public Account deposit(Integer traderId, Double fund) {
        // Validate user input
        if (traderId == null) {
            throw new IllegalArgumentException("TraderId must not be null");
        }

        if (fund == null || fund <= 0) {
            throw new IllegalArgumentException("Fund must be greater than 0");
        }

        // Find account by traderId
        Account account = accountJpaRepository.findByTraderId(traderId)
                .orElseThrow(() -> new IllegalArgumentException("Account not found for traderId: " + traderId));

        // Update the amount accordingly
        double currentAmount = account.getAmount();
        double newAmount = currentAmount + fund;
        account.setAmount(newAmount);

        // Save the updated account
        return accountJpaRepository.save(account);
    }

    /**
     * Withdraw a fund to an account by traderId
     * - validate user input
     * - find account by trader id
     * - update the amount accordingly
     *
     * @param traderId must not be null
     * @param fund must be greater than 0
     * @return updated Account
     * @throws IllegalArgumentException if traderId is null or not found,
     * 									and fund is less than or equal to 0
     */
    public Account withdraw(Integer traderId, Double fund) {
        // Validate user input
        if (traderId == null) {
            throw new IllegalArgumentException("TraderId must not be null");
        }

        if (fund == null || fund <= 0) {
            throw new IllegalArgumentException("Fund must be greater than 0");
        }

        // Find account by traderId
        Account account = accountJpaRepository.findByTraderId(traderId)
                .orElseThrow(() -> new IllegalArgumentException("Account not found for traderId: " + traderId));

        // Check if there's enough balance to withdraw
        double currentAmount = account.getAmount();
        if (currentAmount < fund) {
            throw new IllegalArgumentException("Insufficient funds for withdrawal");
        }

        // Update the amount accordingly
        double newAmount = currentAmount - fund;
        account.setAmount(newAmount);

        // Save the updated account
        return accountJpaRepository.save(account);
    }
}
